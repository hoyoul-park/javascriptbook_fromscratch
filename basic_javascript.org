#+TITLE: basic_javascript(누구나 쉽게 배우는 자바스크립트)
#+AUTHOR: frege holy 
* [1장] 자바스크립트 소개
** 모든 browser에는 javascript interpreter가 있다. 
- chrom browser를 연다. url:about:blank
- Command+Option+j로 console을 연다.
  [[file:images/console.png]]
- 3+4;를 console에 쓴다.
- enter를 누르면 evalute된다.
** 두 번째 예제
두번째 예제도 chrom console에서 실행해 본다. 10개의 고양이를 찍는
프로그램이다. 여기에는 함수가 들어간다. 
#+BEGIN_SRC javascript
var drawCats = function (howManyTimes) {
for(var i=0; i< howManyTimes; i++)
{ 
console.log(i+"=^.^=");
}
};
drawCats(10);
#+END_SRC
주의점: enter키는 evalute를 한다. 그래서 여러줄을 작성할때, shift + enter를
입력해서 다음 라인을 작성해야 한다. 다음 라인을 입력할때 enter를 쓰면 줄넘김이
아니라 실행이되기 때문이다. 

- javascript에서 함수는 lambda이다. 그래서 이름이 없다. 함수를 한번이상 사용하기
위해서는 var나 const로 변수나 상수를 이용해서 사용해야 한다. 
* [2장] 자료형과 변수
** 3가지 기본 자료형
- 숫자
- 문자
- boolean
primitive data type이라는 것은 evaluate해서 결과가 동일한것을 의미한다. 예를
들어서 
#+BEGIN_EXAMPLE
>3;
>"adf";
>true;
#+END_EXAMPLE
위 3가지를 evalute해도 결과는 동일하다. syntatic구조물을 해석을 통해 value를
>찾는 과정이 evaluate라고 할때, syntatic 구조물을 계산한 최종결과(value)가
>syntatic 구조물과 같은 것을 primitive data type이라고 한다. primitive data
>type과 관련한 함수들은 언어에서 기본적으로 제공한다. 그런데 javascript는 strong
>type 언어는 아니다. 왜냐하면, strong typed language에서 함수의 경우, domain과
>range type을 명시를 해주어서 잘못된 계산이 일어나지 않게 한다. 예를 들어서
>+라는 함수는 자연수와 자연수의 관계를 나타내도록 정의되기 때문에 아래와 같은
>예를 실행하면 wrong type error가 발생된다. 그런데 javascript는 그렇지
>않다. javascript는 type strong하지 않기 때문에 domain에는 숫자, range에는
>문자가 와도 type casting을 통해 처리가 된다.
#+BEGIN_EXAMPLE
3+"abc"
true +3
#+END_EXAMPLE
** 변수
*** value와 상수 그리고 변수
value: 3, true, "string" function (argument) {}
모든 value는 나열할수 있기 때문에 index가 붙는다. 여기에 숨겨진 의미는 다음과
같다. 참고로 위애 function은 lambda function이다.
1->3, 1->true, 1->string, 1->function 
모든것이 함수다. 여기서, string은 좀 예외다. 왜냐면 string은 char array이기
때문에, index가 문자와 mapping되어 있다. 그런데 여기선 그냥 하나의 primitive
value로 생각하고 넘어가자. 단지 배열이나 list와 같이 domain집합이 한개라는 점만 다를 뿐이다.
여튼 value는 함수에서 range를 말하고, domain은 자연수이다. discrete하기 때문에
그렇다. 나열가능하기 때문이다. 그래서 모든 value에는 자연수인 domain이 있다. 이
domain은 사용할 필요가 없다. programming language에선 모든 thing는 자연수
domain을 갖기 때문이다. 그래서 그냥 value만 사용한다. value만 사용할때는 그대로
사용하면 된다.다음과 같이... 3+4, "dada"+"string"...그냥 value를 사용하면
된다. 그런데 여러번 사용하려면 상수를 사용하면 된다. 상수는 자연수의 index를
문자열로 바꿔서 인식하기 쉽게 만드는 것이다. 예를 들면 const a = 3; 이라고 하면
1-> 3 이 a->3으로 되어서 a를 사용해서 3이란 value를 사용할 수 있는
것이다. 마찬가지로 변수도 var a= 3;이라고 하면 3을 대신해서 사용하지만,
상수하고는 다르다.
상수가 value가 가진 index를 replace한다면, 변수는 상수가 가진 index를 갖는
값이다. 이러면에서 차이가 있다. 
**** 상수의 예
#+BEGIN_EXAMPLE
const a=3;
#+END_EXAMPLE
[before]
| index | value | 
|-------+-------|
|     1 |   3   |
|-------+-------|
[after]
| index | value |
|-------+-------|
| a     |     3 |
|-------+-------|
**** 변수의 예
#+BEGIN_EXAMPLE
var a = 3
#+END_EXAMPLE
| index | value | 
|-------+-------|
|     1 |   3   |
|-------+-------|

[after]
| index | value |
|-------+-------|
| a     |     1 |
|-------+-------|
변수는 index를 값으로 갖는 index이다. 이게 맞는지는 정확히 모르겠다. a라는 것은
symbol이다. value가 아니기 때문에 index가 있는지 아닌지 확실치가
않다. symbol같은경우는 memory address가 index인건 아닐까?그리고 이 memory
address를 마치 상수처럼 replace한건 아닐까 하는 생각이 든다. 즉 symbol은 상수던
변수던 다른식으로 접근해야 하는 것은 아닐까? 다른식이라는건 symbol은 함수이긴
한데 value처럼 자연수 1부터시작하는 index를 갖는게 아니라, memory address를
index로 갖는 함수가 아닐까 한다. 이 부분은 더 공부가 필요하다.
==>요약 정리하면, 상수와 변수는 모두 함수다. javascript에서 상수와 변수는 type이
없다. 다양한 값을 그냥 가리킬수 있다는 것이다. 이 부분이 중요하다.
**** 변수 이름 작성(camel case)양식
javascript에서 변수이름은 camelcase로 작성하는 문화가 있다. 예를 들면
var theNumberOfCows; 이런식이다.
**** 증가 감소 연산자.
- ++: 증가 연산자.
- --: 감소 연산자.
**** 증가 감소 연산자의 위치에 따른 변화
- 후위연산자
[[file:images/%ED%9B%84%EC%9C%84%EC%97%B0%EC%82%B0%EC%9E%90.png]]
- 전위연산자
[[file:images/%EC%A0%84%EC%9C%84%EC%97%B0%EC%82%B0%EC%9E%90.png]]
**** +=연산자, -=연산자.
c나 다른언어와 동일하다.
**** 문자열
javascript는 type이 약한 언어다. type이 강한 언어는 함수나 변수에 type을
명시하기 때문에 type과 다른 변수나 함수의 사용이 제한된다. +라는 연산자만
하더라도, type이 강한 언어에는 문자열과 숫자간의 덧셈은 허용되지 않는다. 그런데
javascript는 가능하다. 모든 연산이나 함수에 있어서 type과 관련없이
수행된다. 이렇게 할 수 있는 것은 모든 함수에 문제가 생기지 않도록, 즉 type
casting을 모든 함수와 연산자에 구현했기 때문에 가능한 것이다. 
***** 문자열 연결하기
+연산자로 연결한다.
#+BEGIN_EXAMPLE
var a = "내 이름은";
var b = "frege";
#+END_EXAMPLE
***** 문자열 길이 구하기
length를 사용하면된다.문자열끝에 length를 넣어도 되고, 변수끝에 붙여서 실행해도
된다. 
#+BEGIN_EXAMPLE
"abcd".length;
=>4
var a = "abcd";
a.length;
=>4
#+END_EXAMPLE
***** 문자열에서 한글자만 가져오기
문자열은 char array이다. 즉 "abcd"라는 문자열은 {0,1,2,3}과 mapping되어 있다고
불 수 있다. "abcd"라는 문자열에서 특정 문자를 꺼내올려면 이 index를 이용해야
한다. 그런데 이 index는 implicit하다. 직접 사용할 수 없다. 상수나 변수를 통해서
index를 explicit하게 표현한 후에 사용이 가능하다.그래서 다음과 같이 변수나 상수
선언을 통해서 가져온다.
#+BEGIN_EXAMPLE
var s = "abcd";
s[0];
s[1];
...
#+END_EXAMPLE
***** 문자열 잘라내기.
slice라는 함수를 쓴다.
#+BEGIN_EXAMPLE
var temp = "abcdefadsfasdf";
temp.slice(3,5);

#+END_EXAMPLE
***** 문자열을 대문자 혹은 소문자로 바꾸기
toUpperCase, toLowerCase를 이용해서 바꿀 수 있다.
#+BEGIN_EXAMPLE
"abcdeFg".toUpperCase();
"abcdeFg".toLowerCase();
#+END_EXAMPLE
**** Boolean
***** and연산자(&&)
javascript에서 and 연산자는 &를 두개 써서 나타낸다.
***** or연산자(||)
javascript에서 or연산자는 |를 두개 써서 나타낸다.
***** not연산자(!)
javascript의 not연산자. 
***** 삼중등호(===)
javascript에서 특이한 문법의 하나가 삼중등호다. 두개의 값이 같으면 true, 다르면
false를 나타내는데, 이 기호가 ===(삼중등호)다. 
***** 이중등호(==) : equal-ish
type이 없는 javascript언어의 장점이자 단점이다. type있는 언어에서 "3" 과 3은
완전히 다른 value다. 그리고 false와 0도 완전히 다른 value다. 그래서 "3" 과 3이
같은지 비교하면, 당연히 false가 된다. 그런데 javascript는 type이 없다. 그래서
3과 "3"이 같다고 할 수도 있다. 그런 문법적인 유연성이 typeless언어에서
등장하는데, 이것이 바로 그것이다.
#+BEGIN_EXAMPLE
3 == "3"
0 == false
=> true
#+END_EXAMPLE
**** undefined와 null
undefined는 symbol을 선언만 하고 값이 없는 경우다. null은 value다. null이란
value는 값이 없다는 건데, strong type언어는 undefined는 있을 수 있지만, null은
있을 수 없다. type이 정해진 이상, type이 없는 값이란 없기 때문이다. null은
typeless언어이기 때문에 존재하는 것이다.
* [3장] 배열
** value와 배열
값이라는 것은 domain과 range에 원소의 갯수가 하나밖에 없는 함수다. 여러개의
domain과 range를 갖는 함수형태로 바로 배열이 있다. string도 char array로 보면
된다. 값을 여러개 사용하는것 보다 배열을 사용하는게 그래서 더 효율적이다.
** 배열 만들기
[]을 써서 배열을 만든다. []안에 value를 넣어서 만들수 있다. 
*** 첫번째 방법
["a","b","c"] 이렇게 만든다. 그냥 array value다. 마치 "abc"와 별다를게
없다. 함수로 치면 function (argument){}와 같은 lambda function과 같다. 배열을
만들어 사용하는 이유는 한번이상 사용할것이 확실하기 때문이다. 그러면 상수나
변수를 사용해야 한다. 마치 함수처럼...여기서는 첫번째 방식인 value로서 배열을
만들 수 있음을 보여준다.
*** 변수나 상수 사용해서 배열 만들기.
var array = ["a", "b", "c"]; 가장 일반적인 형태다.
*** 동적배열.
가장 인상적인 배열을 만드는 방식이다.
var a= []; 빈배열을 만들고...
값을 그냥 넣는다.
a[0] = "a";
a[1] = "b";
이렇게 동적배열을 만든다. 매우 매력적이다.
** 배열 원소 접근하기
위에처럼 배열을 만든후에 배열원소에 접근하는 방식은 index로 접근하면 된다. a[0];
a[1]이렇게 접근하면 된다.
** 배열 원소 설정하기와 바꾸기
동적배열이 가능하기 때문에 없는 index에 해당하는 값은 원소가 설정되고, 값이
있다면 바꿔 써지게 된다.
예를 들어 보자.
var array = ["a","b","c"];
array[1] = "x";로 하면,
array는 ["a","x","c"]; 로 바꿔써진다. 그러면 array[3]="d"로 하면, array에 원소가
동적으로 삽입되어 array의 값은 ["a","x","c","d"] 이렇게 된다. 동적배열이
가능하다는 것은 순차적으로만 입력되는것을 보장하지 않는다. 예를 들어 array[20] =
"z";라고 한다면 어떻게 될것인가? array[4-19]까지는 mapping되는 range가 없다는
말이다. 이것은 undefined다. null은 mapping되는 range의 value가 있다는 얘기고
undefined는 mapping되는 value가 없다는 말이다. 즉 domain에 원소는 있는데,
co-domain에 mapping되는 value가 없다는 것이다. 
** 한 배열에서 여러 자료형 사용하기.
javascript는 type이 없기 때문에, 한 배열에서 여러 자료형 사용하는것이 가능하다.
예를 들면, a = ["a", 3 ]로 배열을 만들수가 있다는 것이다. 더블 배열도 만들 수
있다. 예를 들면, var b = ["a","b",["c","d"],"e"] 도 가능하다.
** 배열 다루기
*** property와 method.
property와 method는 객체지향 언어에서 사용하는 개념이긴 하나, 그 개념도
javascript에는 도입했다. 그 개념은 배열과 클래스에 도입이되었다. property는
객체나 array의 상태를 보여주고, method는 그값을 변경한다. 즉 javascript에서는
domain과 codomain의 원소의 갯수가 여러개인것을 객체로 생각한다. 단 한개의 원소로
구성되면 그것은 primitive data일 뿐이다. array와 class의 차이는 array는 domain의
원소가 자연수이고 class는 자연수가 아니라는 그 차이가 있을 뿐이다. 이렇게
여러개의 원소를 갖는 구조에는 property와 method가 있다.
*** array property: length
string이나 array에 length를 사용하면 그 길이를 알 수 있다.
*** array method: push,unshift [배열 원소 추가하기]
var a = [];
a.push("a");
a.push("b");
a.push("c");
["a","b","c"]순차적으로 mapping된다.

unshift는 앞에서 부터 mapping한다.
a.unshift("d");
a.unshift("e");
a.unshift("f");
["f","e","d","a","b","c"]가 된다.
*** array method: pop, shift [ 배열 원소 제거하기 ]
pop은 배열의 마지막 원소를 반환한다.
var a = ["a","b","c"];
a.pop()은 "c"가 return된다.
a.shift()는 "a"가 return된다.
*** 배열 결합하기: concat
두개의 배열을 합쳐서 새로운 배열을 만든다. 배열을 함수로 보면 두개의 함수를
합쳐서 새로운 함수를 만든다고 보면 된다.
예를 들면, a = ["a","b"]; b= ["y","z"];
a.concat(b);하면 ["a","b","y","z"]라는 새로운 배열이 만들어진다.
*** 배열의 index값 찾기: indexOf method.
배열을 함수로 본다면 index를 사용해서 domain에 mapping된 값을 꺼낼수
있었다. 반대로 range에 있는 value를 사용해서 domain의 index를 return받을 수
있다. 그 때 사용하는 method가 indexOf("값");을 사용한다.
*** 배열을 문자열로 바꾸기 : join()
배열이나 문자열이나 그 구조는 비슷하다. 그래서 배열을 문자열로 바꿀 수 있다. 
#+BEGIN_EXAMPLE
var array = [ "a","b","c"];
array.join(); => "abc"로 return.
#+END_EXAMPLE
join()가 재밌는 것은 문자열로 변환시 separator를 추가할 수 있다는
것이다. separator는 문자열이다.
#+BEGIN_EXAMPLE
var array = ["a","b","c"];
array.join("*")
=> "a*b*c"
#+END_EXAMPLE
*** Math관련 method
- Math.random(); 0 과 1사이의 임의의 수를 출력한다.
- Math.floor(); 소숫점 이하를 버린다.


* [4장] 객체
** 객체와 배열의 차이점
객체와 배열은 value와 달리 domain과 co-domain의 원소 갯수가 1개 이상인 함수를
의미한다. array의 경우 domain의 원소가 자연수이지만, 객체는 domain의 원소가
자연수가 아니라 임의의 string으로 되어 있다. key라고 부르는 string이다. 
** 객체 만들기.
*** literal로 만들기
배열을 만들때 [ ] 기호를 사용했다. 객체는 { }를 사용한다. array는 [ ]안에
value만 넣어주면 되었다. 왜냐하면 index는 자연수이기 때문에 implicit하기
때문이다. 반면에 객체는 explicit하게 domain을 명기해야 한다. 예를 들면 
{ "이름" : "holy", "키": 172} 이렇게 작성한다. 이렇게 작성하는것을 literal이라고
부르기도 한다.
*** 변수나 상수로 만들기 
var a = { "이름": "frege", "키": 172}
*** 동적으로 객체 만들기.
동적으로 배열 만들기만큼이나 인상적인 요소다. 
var class1 ={};
배열처럼 이렇게 선언하고 class1["이름"] = "frege"; class1["키"] = 172;라고
매핑이 가능하다. 인상적이지 않은가?
class1.이름 = "frege"; class1.키=172는 어떤가? 인상적이지 않은가? 그런데 key가
string이 아니다. 그래도 괜찮다. 객체를 만들때도 이런식으로 key가 string으로
지정하지 않아도된다. 
*** 따옴표가 없는 키
이전에 말했지만, 객체는 함수인데, domain과 co-domain의 원소가 1개 이상이고
domain이 자연수가 아니라 string이라고 했다. 그래서 객체를 만들때 domain원소를
string으로 한다고 했다. 그런데 string을 명시적으로 기술하지 않아도 된다. 즉
따옴표를 사용하지 않아도 된다. 
#+BEGIN_EXAMPLE
var 고양이 = { 
다리:3
이름: "야옹이"
색깔: "얼룩무뉘"
}
#+END_EXAMPLE
*** 객체 안의 값에 접근하기.
**** 객체원소를 [ ]로 접근.
var 고양이 = { "키":172, "나이":3};에서
고양이["키"]로 접근하거나 고양이["나이"]로 접근한다.
**** 객체원소를 .으로 접근.
고양이.키; 고양이.나이; 
*** 배열과 객체 결합하기 
**** 배열안에 객체를 넣어 사용.
var array1 = [ "철수", {"이름":"frege","키": 172}, "영희]
array1[0]; => 철수
array1[1].이름; =>"frege"
array1[1]["이름"] => "frege"
**** 객체안에 배열을 넣어 사용.
var object1 = { 이름:"frege, 나이: 11, 행운의숫자:[2,4,6,8] }
object1.이름; object1["이름"]; 
이렇게 사용할 수 있다.
**** 객체를 만들고 배열로 관리
var 철수 = { "이름": "철수", "나이": 17 , "키": 172};
var 영희 = { "이름": "영희", "나이": 18 , "키": 175};
var 친구들 = [ 철수, 영희];
이렇게 객체를 만들고 배열로 관리하는게 가능하다.
*** 크롬에서 객체 확인하기
console에서 객체를 입력하고 살펴보자.
[[file:images/chrome%EA%B0%9D%EC%B2%B4.png]]

* [5장] HTML 기초

* [6장] 조건문과 반복문
** 조건문
*** if문
#+BEGIN_EXAMPLE
var name = "frege"
if (name.length>7)
{
console.log("name is over 7");
}
#+END_EXAMPLE
*** if else문
#+BEGIN_EXAMPLE
var name = "holy frege";
if (name.length > 5)
{ 
console.log("full name");
} else {
console.log ("not full name");
}
#+END_EXAMPLE
*** if else if
#+BEGIN_EXAMPLE
var ramyun = true;
var soup = true;

if (ramyun)
{
console.log("ramyun");
} else if (soup)
{
console.log("soup");
}else
{
console.log("nothing");
}
#+END_EXAMPLE
** 반복문
반복문은 while과 for가 있는데 기존 언어와 다를바가 없다.
*** while문
while(조건){
}
*** for문
for( var a=0 ; a<10; a++)
{
}


* [7장] 행맨 게임 제작
webbrowser의 component는 javascript로 제어가 가능한데, browser의 모달창을
javascript로 조정 가능하다. BOM(Browser Object Model)이라고 하는데, 그 창을
설명한다. prompt,confirm창은 window.prompt(), window.confirm()로 실행한다.
** 프롬프트 만들기
var name = prompt("이름이 뭐에요?");
console.log("이름은" + name);
** confirm창 만들기
var tf = confirm("고양이를 좋아하세요?");
if (tf){ 
console.log("고양이를 좋아합니다.");
}else{
console.log("고양이를 좋아하지 않습니다.");
}
** alert창 만들기
확인창. 
* [8장] 함수
** 함수의 기본구조
- literal function은 아래와 같다.
function (argument)
{
body
}
** 함수의 호출
literal함수를 그대로 쓸수도 있지만, 보통 상수나 변수로 assign을 한 후에
호출한다. 함수를 호출하면, return값을 반환하는데, body에 아무런 value를
return하지 않을 경우 undefined를 return한다.
** 함수에 인수 여러개 전달하기.
function (arg1, arg2){
}

* [9장] DOM과 jQuery
html문서는 Browser에서 parsing되어 DOM tree로 만들어진다. DOM tree는 조작할 수
있는 method를 제공한다.  browser에서 제공하는 document라는
javascript객체는 dom tree를 말한다. 그리고 document라는 객체에는 dom을 조작하는
method와 property를 제공한다. 우리는 <script>라는 tag를 이용해서 html에
embeded해서 그 값을 control한다.
#+BEGIN_EXAMPLE
var headingline = document.getElementById("my-heading");
alert(headingline.innerHTML);
#+END_EXAMPLE

** JQuery를 사용한 DOM Tree 다루기.
document객체를 사용하는 것보다, JQuery를 사용하는게 편하고 많은 기능이 library로
되어 있다. 

*** JQuery library로드.
#+BEGIN_EXAMPLE
<script src = "https://code.jquery.com/jquery-2.1.0.js"></script>
#+END_EXAMPLE

*** JQuery를 이용해서 dom tree 수정.
#+BEGIN_EXAMPLE
<script>
var headingline = prompt("heading을 입력하세요.");
$(#main-heading).text(headingline);
#+END_EXAMPLE
$(#main-heading)에서 #은 id를 의미한다. $함수가 jquery가 사용하는
문법이다. $함수 안에 element를 입력하거나, id를 입력해서 element를 선택한다. 

*** JQuery를 사용해서 엘리먼트 새로 만들기.
append function: Jquery에서 element를 추가하는 함수다. 
#+BEGIN_EXAMPLE
$("body").append("<p> paragraph 엘리먼트</p>");
#+END_EXAMPLE

*** JQeury를 사용해서 애니메이션 효과 주기.
- fadeIn()와 fadeOut()의 사용.

* [10장] 인터랙티브 프로그래밍
* [11장] 보물 찾기 게임
* [12장] 객체 지향 프로그래밍
* [13장] 캔바스 엘리먼트
* [14장] 캔바스 애니메이션
* [15장] 키보드를 사용한 애니메이션 제어
* [16장] 뱀게임 만들기 1부
* [17장] 뱀게임 만들기 2부
* [18장] 이후 학습할 내용

